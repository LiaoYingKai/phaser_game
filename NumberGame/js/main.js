//https://www.emanueleferonato.com/2018/10/01/123-html5-game-built-with-phaser-update-to-phaser-3-and-commented/
//參考資料來源

var gameOptions = {
  maxSumLen: 5,
  localStorageName: "oneplustwo",
  timeToAnswer: 3000,
  nextLevel: 400
}
var game;
window.onload = function() {
  var gameConfig = {
    width: 500,
    height: 500,
    scene: [playGame],
    backgroundColor: 0x444444
  }
  game = new Phaser.Game(gameConfig);
}

class playGame extends Phaser.Scene {
  constructor() {
    super({
      key: 'playGame'
    })
  }

  preload() {
    this.load.image("timebar", "assets/timebar.png");
    this.load.spritesheet("buttons", "assets/buttons.png", {
      frameWidth: 400,
      frameHeight: 50
    });
  }
  create() {
    this.isGameOver = false;
    this.score = 0;
    this.correctAnswers = 0;
    this.topScore = localStorage.getItem(gameOptions.localStorageName) == null ? 0 : localStorage.getItem(gameOptions.localStorageName);
    this.sumsArray = [];
    for (var i = 1; i < gameOptions.maxSumLen; i++) {
      this.sumsArray[i] = [
        [],
        [],
        []
      ];
      for (var j = 1; j <= 3; j++) {
        this.buildThrees(j, 1, i, j);
      }
    }
    console.log(this.sumsArray);
    this.questionText = this.add.text(250, 160, "-", {
      font: "bold 72px Arial"
    });
    this.questionText.setOrigin(0.5);
    this.scoreText = this.add.text(10, 10, "-", {
      font: "bold 24px Arial"
    });
    for (i = 0; i < 3; i++) {
      var numberButton = this.add.sprite(game.config.width / 2, 250 + i * 75, "buttons");
      numberButton.setFrame(i);
      numberButton.setInteractive();
      numberButton.on("pointerdown", this.checkAnswer);
    }
    var numberTimer = this.add.sprite(game.config.width / 2, 325, "timebar");
    this.buttonMask = this.add.sprite(game.config.width / 2, numberTimer.y, "timebar");
    this.buttonMask.setVisible(false);
    var mask = this.buttonMask.createBitmapMask();
    numberTimer.setMask(mask);
    this.nextNumber();
  }

  // buildThrees method, it will find all possible sums
  // arguments:
  // initialNumber: the first number. Each question always start with a positive number
  // currentIndex: it's the amount of operands already placed in the sum
  // limit: the max amount of operands allowed in the question
  // currentString: the string generated so far
  buildThrees(initialNummber, currentIndex, limit, currentString) {

    // the possible operands, from -3 to 3, excluding the zero
    var numbersArray = [-3, -2, -1, 1, 2, 3];

    // looping from 0 to numbersArray's length
    for (var i = 0; i < numbersArray.length; i++) {

      // "sum" is the sum between the first number and current numberArray item
      var sum = initialNummber + numbersArray[i];

      // output string is generated by the concatenation of current string with
      // current numbersArray item. I am adding a "+" if the item is greater than zero,
      // otherwise it already has its "-"
      var outputString = currentString + (numbersArray[i] < 0 ? "" : "+") + numbersArray[i];

      // if sum is between 1 and 3 and we reached the limit of operands we want...
      if (sum > 0 && sum < 4 && currentIndex == limit) {

        // then push the output string into sumsArray[amount of operands][result]
        this.sumsArray[limit][sum - 1].push(outputString);
      }

      // if the amount of operands is still below the amount we want...
      if (currentIndex < limit) {

        // recursively calling buildThrees, passing as arguments:
        // the current sum
        // the new amount of operands
        // the amount of operands we want
        // the current output string
        this.buildThrees(sum, currentIndex + 1, limit, outputString);
      }
    }
  }

  // this method asks next question
  nextNumber() {

    // updating score text
    this.scoreText.setText("Score: " + this.score.toString() + "\nBest Score: " + this.topScore.toString());

    // if we already answered more than one question...
    if (this.correctAnswers > 1) {

      // stopping time tween
      this.timeTween.stop();

      // resetting mask horizontal position
      this.buttonMask.x = game.config.width / 2;
    }

    // if we already answered at least one question...
    if (this.correctAnswers > 0) {

      // tween to slide out the mask, unvealing what's behind it
      this.timeTween = this.tweens.add({
        targets: this.buttonMask,
        x: -150,
        duration: gameOptions.timeToAnswer,
        callbackScope: this,
        onComplete: function() {

          // calling "gameOver" method. "?" is the string to display
          this.gameOver("?");
        }
      });
    }

    // drawing a random result between 0 and 2 (it will be from 1 to 3)
    this.randomSum = Phaser.Math.Between(0, 2);

    // choosing question length according to current score
    var questionLength = Math.min(Math.floor(this.score / gameOptions.nextLevel) + 1, 4)

    // updating question text
    this.questionText.setText(this.sumsArray[questionLength][this.randomSum][Phaser.Math.Between(0, this.sumsArray[questionLength][this.randomSum].length - 1)]);
  }

  // method to check the answer, the argument is the button pressed
  checkAnswer() {

    // we check the answer only if it's not game over yet
    if (!this.scene.isGameOver) {

      // button frame is equal to randomSum means the answer is correct
      if (this.frame.name == this.scene.randomSum) {

        // score is increased according to the time spent to answer
        this.scene.score += Math.floor((this.scene.buttonMask.x + 350) / 4);

        // one more correct answer
        this.scene.correctAnswers++;

        // moving on to next question
        this.scene.nextNumber();
      }

      // wrong answer
      else {

        // if it's not the first question...
        if (this.scene.correctAnswers > 1) {

          // stop the tween
          this.scene.timeTween.stop();
        }

        // calling "gameOver" method. "this.frame.name + 1" is the string to display
        this.scene.gameOver(this.frame.name + 1);
      }
    }
  }

  // method to end the game. The argument is the string to write
  gameOver(gameOverString) {

    // changing background color
    this.cameras.main.setBackgroundColor("#ff0000");

    // displaying game over text
    this.questionText.setText(this.questionText.text + " = " + gameOverString);

    // now it's game over
    this.isGameOver = true;

    // updating top score in local storage
    localStorage.setItem(gameOptions.localStorageName, Math.max(this.score, this.topScore));

    // restart the game after two seconds
    this.time.addEvent({
      delay: 2000,
      callback: function() {
        this.scene.start("PlayGame");
      },
      callbackScope: this
    });
  }
}